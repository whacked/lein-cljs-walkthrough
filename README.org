#+PROPERTY: header-args:sh :results output

* what is this?

  we go from a plain =lein new= to a working =lein cljsbuild once= project, documenting *each step*

* init

#+BEGIN_SRC sh
lein new lein-cljs-walkthrough
#+END_SRC
#+RESULTS:
: Generating a project called lein-cljs-walkthrough based on the 'default' template.
: The default template is intended for library projects, not applications.
: To see other templates (app, plugin, etc), try `lein help new`.

* adding cljsbuild dependencies

  at this point =cljsbuild= does nothing (note the =exec...:= block is used to redirect STDERR so the output gets captured.
In reality you only run the commands in between, i.e. =lein cljsbuild once=:

  #+BEGIN_SRC sh
  exec 2>&1
  lein cljsbuild once
  :
  #+END_SRC

  #+RESULTS:
  : 'cljsbuild' is not a task. See 'lein help'.

** update [[file:project.clj]] with minimal cljsbuild dependencies

   #+BEGIN_SRC sh
   lein cljsbuild once
   #+END_SRC

   #+RESULTS:
   #+begin_example
   WARNING: no :cljsbuild entry found in project definition.
   --------------------------------------------------------------------------------
   WARNING: your :cljsbuild configuration is in a deprecated format.  It has been
   automatically converted it to the new format, which will be printed below.
   It is recommended that you update your :cljsbuild configuration ASAP.
   --------------------------------------------------------------------------------
   :cljsbuild
   {:builds []}
   --------------------------------------------------------------------------------
   See https://github.com/emezeske/lein-cljsbuild/blob/master/README.md
   for details on the new format.
   --------------------------------------------------------------------------------
   Compiling ClojureScript...
#+end_example

   this runs, with warnings

** make =cljsbuild once= do something

*** add a src directory

    and we're not going to name it the same thing, because we're rebellious.

    #+BEGIN_SRC sh
    mkdir -p src/cljs/something_something
    tree src
    #+END_SRC

    #+RESULTS:
    : src
    : └── cljs
    :     └── something_something
    : 
    : 2 directories, 0 files

*** add a source file

    #+BEGIN_SRC sh
    cat src/cljs/something_something/core.cljs
    #+END_SRC

    #+RESULTS:
    : (ns something-something.core
    :   )
    : 
    : (enable-console-print!)
    : 
    : (prn "HELLO WORLD!")

    
*** =cljsbuild=

    #+BEGIN_SRC sh
    lein cljsbuild once
    #+END_SRC

    #+RESULTS:
    : Compiling ClojureScript...
    : Compiling "hello_my_output/main_file.js" from ["src"]...
    : Successfully compiled "hello_my_output/main_file.js" in 0.991 seconds.

*** create an html file to use the output

    #+BEGIN_SRC sh
    cat index.html
    #+END_SRC

    #+RESULTS:
    #+begin_example
    <!DOCTYPE html>
    <html>
        <head>
            <title>blah-project</title>
            <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        </head>
        <body>
            <script src="hello_my_output/main_file.js" type="text/javascript"></script>
        </body>
    </html>
#+end_example

* add jQuery via =lein-npm= and =:foreign-libs=

** add lein-npm plugin to [[file:project.clj]]

** install jquery using =lein npm=

   #+BEGIN_SRC sh
   lein npm install jquery
   #+END_SRC

   #+RESULTS:
   : jquery@2.2.0 node_modules/jquery

   now we want to reference it in [[file:src/cljs/something_something/core.cljs]]
